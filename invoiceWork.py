{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "import glob\n",
    "import datetime\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "##----Here we first clean data and add Porper Date format to each day of the week\n",
    "\n",
    "# df = pd.read_csv(\"sunday.csv\")\n",
    "# df.dropna(subset=['ROUTE'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\", \"Unnamed: 16\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Sun 26 April 2020\"\n",
    "# df.to_csv(\"sunday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "\n",
    "# df = pd.read_csv(\"monday.csv\")\n",
    "# df.dropna(subset=['IN'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\", \"Unnamed: 16\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Mon 27 April 2020\"\n",
    "# df.to_csv(\"monday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "# df = pd.read_csv(\"tuesday.csv\")\n",
    "# df.dropna(subset=['IN'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Tue 28 April 2020\"\n",
    "# df.to_csv(\"tuesday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "# wed = pd.read_csv(\"wednesday.csv\")\n",
    "# wed.dropna(subset=['IN'], axis = 'rows', how ='all', inplace = True) \n",
    "# wed.fillna(0,inplace = True)\n",
    "# wed.drop([\"VANS\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# wed[\"date\"] = \"Wed 29 April 2020\"\n",
    "# wed.to_csv(\"wednesday.csv\", index=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# df = pd.read_csv(\"thursday.csv\")\n",
    "# df.dropna(subset=['IN'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Thu 30 April 2020\"\n",
    "# df.to_csv(\"thursday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "\n",
    "# df = pd.read_csv(\"friday.csv\")\n",
    "# df.dropna(subset=['ROUTE'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Fri 1 May 2020\"\n",
    "# df.to_csv(\"friday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "\n",
    "# df = pd.read_csv(\"saturday.csv\")\n",
    "# df.dropna(subset=['ROUTE'], axis = 'rows', how ='all', inplace = True) \n",
    "# df.fillna(0,inplace = True)\n",
    "# df.drop([\"VANS\",\"WEEK\"],axis = 1,inplace = True, errors = 'ignore')\n",
    "# df[\"date\"] = \"Sat 2 May 2020\"\n",
    "# df.to_csv(\"saturday.csv\", index=False)\n",
    "# df\n",
    "\n",
    "\n",
    "#here we combine our clean data\n",
    "sun = pd.read_csv(\"sunday.csv\")\n",
    "mon = pd.read_csv(\"monday.csv\")\n",
    "tue = pd.read_csv(\"tuesday.csv\")\n",
    "wed = pd.read_csv(\"wednesday.csv\")\n",
    "thu = pd.read_csv(\"thursday.csv\")\n",
    "fri = pd.read_csv(\"friday.csv\")\n",
    "sat = pd.read_csv(\"saturday.csv\")\n",
    "\n",
    "myDatesArray = pd.concat([sun,mon,tue,wed,thu,fri,sat], axis=0)\n",
    "myDatesArray = myDatesArray.reset_index(drop=True)\n",
    "#myDatesArray\n",
    "#myDatesArray.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total routes for WEEK 18 is: 126\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "myOneWeekArray = []\n",
    "weekBeforeSunday = \"Sun 26 May 2020\"\n",
    "mostRecentSunday = \"Sun 3 May 2020\"\n",
    "\n",
    "\n",
    "# currentDate = datetime.date.today()\n",
    "# dateWeekDay = currentDate.weekday()\n",
    "# mostRecentSunday = 0\n",
    "# weekBeforeSunday = 0\n",
    "# twoWeeksBeforeSunday = 0\n",
    "# fourWeeksBeforeSunday = 0\n",
    "# dateWeekDay+=1\n",
    "# if currentDate.weekday() > 0:\n",
    "#     if currentDate.weekday() == 6:\n",
    "#         print(currentDate)    \n",
    "#     else:\n",
    "#         mostRecentSunday = currentDate - datetime.timedelta(days=dateWeekDay)\n",
    "#         weekBeforeSunday = mostRecentSunday - datetime.timedelta(days=7)\n",
    "#         twoWeeksBeforeSunday = mostRecentSunday - datetime.timedelta(days=14)\n",
    "#         fourWeeksBeforeSunday = mostRecentSunday - datetime.timedelta(days=28)\n",
    "# print('last week was from: ', weekBeforeSunday, ' until: ', mostRecentSunday, ' last two weeks were: ', twoWeeksBeforeSunday, ' until ', mostRecentSunday)\n",
    "      \n",
    "\n",
    "for row in myDatesArray.itertuples(index=True, name='Pandas'):\n",
    "    invoiceObject = {}\n",
    "    #print(getattr(row, \"date\"))\n",
    "    if getattr(row, \"NAME\") == getattr(row, \"NAME\"):\n",
    "        if weekBeforeSunday < getattr(row, \"date\") < mostRecentSunday:\n",
    "            if len(myOneWeekArray) > 0:\n",
    "                for element in myOneWeekArray[0]:\n",
    "                    if element == 'LVP':\n",
    "                        myOneWeekArray[0][element] = myOneWeekArray[0][element] + getattr(row, \"LVP\")\n",
    "                        if element == 'LWP':\n",
    "                            myOneWeekArray[0][element] = myOneWeekArray[0][element] + getattr(row, \"LWP\")\n",
    "                            #print(myOneWeekArray[0][element])\n",
    "        else:\n",
    "            invoiceObject['NAME'] = getattr(row, \"NAME\")\n",
    "            invoiceObject['ROUTE'] = getattr(row, \"ROUTE\")\n",
    "            invoiceObject['LWP'] = getattr(row, \"LWP\")\n",
    "            invoiceObject['LVP'] = getattr(row, \"LVP\")\n",
    "            invoiceObject['Deductions'] = getattr(row, \"SUP\")\n",
    "            invoiceObject['Fuel'] = getattr(row, \"FUEL\")\n",
    "            myOneWeekArray.append(invoiceObject)\n",
    "                        \n",
    "                        \n",
    "#print(myOneWeekArray)\n",
    "#type(myOneWeekArray)\n",
    "                \n",
    "\n",
    "    #count all routes\n",
    "tempRoute = defaultdict(list)\n",
    "for d in myOneWeekArray:\n",
    "    tempRoute[d['NAME']].append(d['ROUTE'])\n",
    "routes = [{'NAME': k, 'ROUTE': v, 'count': len(v)} for k, v in tempRoute.items()] \n",
    "\n",
    "totalRoutes = sum(item['count'] for item in routes)\n",
    "print(\"Total routes for WEEK 18 is:\", totalRoutes)\n",
    "\n",
    "\n",
    "#here we will count MFN and BULK routes\n",
    "\n",
    "\n",
    "    #count all LVP\n",
    "# tempLVP = defaultdict(list)\n",
    "# for d in myOneWeekArray:\n",
    "#     tempLVP[d['NAME']].append(d['LVP'])\n",
    "# myLVP = [{'NAME': k, 'LVP': v, 'count': len(v)} for k, v in tempLVP.items()] \n",
    "# myLVP\n",
    "# # totalLVP = sum(item['count'] for item in myLVP)\n",
    "# # print(\"Total LVP for WEEK 18 is:\", totalLVP)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "126"
      ]
     },
     "execution_count": 475,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "9",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 9",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-248-8141116b617f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#(datetime.datetime.strptime(str(myDatesArray['date']), '%a %b %d %Y'))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmyDatesArray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 9"
     ]
    }
   ],
   "source": [
    "#(datetime.datetime.strptime(str(myDatesArray['date']), '%a %b %d %Y'))\n",
    "myDatesArray[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Django Shell-Plus",
   "language": "python",
   "name": "django_extensions"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
